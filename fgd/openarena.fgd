//generated by def2fgd

@SolidClass flags(Angle)  = _decal : "Compiler-only entity that specifies a decal to be projected. Should contain 1 or more patch meshes (curves) and target an info_null entity. The distance between the center of the _decal entity and the target is the axis and distance of projection."
[
]
@PointClass size(-4 -4 -4, 4 4 4) color(197 225 255) flags(Angle)  = _skybox : "Compiler-only entity that specifies a the origin of a skybox (a wholly contained, seperate area of the map), similar to some games' portal skies. When compiled with Q3Map2, the skybox surfaces will be visible from any place where sky is normally visible. It will cast shadows on the normal parts of the map, and can be used with cloud layers and other effects."
[
]
@PointClass size(-16 -16 -16, 16 16 16) color(77 77 255) flags(Angle) studio("models/powerups/ammo/bfgam.md3") = ammo_bfg : "BFG ammo. Gives the player 15 by default."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 40, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when picked up (default 15)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction. "
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(77 77 255) flags(Angle) studio("models/powerups/ammo/machinegunam.md3") = ammo_bullets : "Machine Gun ammo. Gives the player 50 by default."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 40, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when picked up (default 50)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(77 77 255) flags(Angle) studio("models/powerups/ammo/plasmaam.md3") = ammo_cells : "Plasma Gun ammo. Gives the player 30 by default."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 40, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when picked up (default 30)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(77 77 255) flags(Angle) studio("models/powerups/ammo/grenadeam.md3") = ammo_grenades : "Grenade Launcher ammo. Gives the player 5 by default."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 40, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when picked up (default 5)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(77 77 255) flags(Angle) studio("models/powerups/ammo/lightningam.md3") = ammo_lightning : "Lightning Gun ammo. Gives the player 60 by default."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 40, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when picked up (default 60)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(77 77 255) flags(Angle) studio("models/powerups/ammo/rocketam.md3") = ammo_rockets : "Rocket Launcher ammo. Gives the player 5 by default."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 40, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when picked up (default 5)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(77 77 255) flags(Angle) studio("models/powerups/ammo/shotgunam.md3") = ammo_shells : "Shotgun ammo. Gives the player 10 by default."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 40, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when picked up (default 10)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(77 77 255) flags(Angle) studio("models/powerups/ammo/railgunam.md3") = ammo_slugs : "Railgun ammo. Gives the player 10 by default."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 40, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when picked up (default 10)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@SolidClass flags(Angle)  = func_bobbing : "Solid entity that oscillates back and forth in a linear motion. By default, it will have an amount of displacement in either direction equal to the dimension of the brush in the axis in which it's bobbing. Entity bobs on the Z axis (up-down) by default. It can also emit sound if the noise key is set. Will crush the player when blocked."
[
	speed(string) : : : "amount of time in seconds for one complete oscillation cycle (default 4)."
	height(string) : : : "sets the amount of travel of the oscillation movement (default 32). "
	phase(string) : : : "sets the start offset of the oscillation cycle. Values must be 0 < phase < 1. Any integer phase value is the same as no offset (default 0)."
	noise(string) : : : "path/name of .wav file to play. Use looping sounds only (eg. sound/world/drone6.wav - See Notes)."
	model2(string) : : : "path/name of model to include (eg: models/mapobjects/jets/jets01.md3)."
	origin(string) : : : "alternate method of setting XYZ origin of sound and .md3 model included with entity (See Notes)."
	light(integer) : "Brightness" : 300
	color(string) : : : "constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	_targetname(string) : : : "Used to attach a misc_model entity to this entity."
	_lightmapscale(string) : : : "Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0)."
	_castshadows(string) : : : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world."
	_receiveshadows(string) : : : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : : : "Sets the cel shader used for this geometry. Note: omit the textures/ prefix."
	alphamap(string) : : : "Path/name for the art file used to guide the mapping of textures on the terrain surface."
	layers(string) : : : "Integer value is the number unique root shaders that will be use on the terrain."
	shader(string) : : : "Path to the metashader used to assign textures to the terrain entity. Note: Omit the textures/ prefix."
	spawnflags(flags) = 
	[
		1 : "x_axis" : 0 : "entity will bob along the X axis."
		2 : "y_axis" : 0 : "entity will bob along the Y axis."
	]
]
@SolidClass flags(Angle)  = func_button : "When a button is touched by a player, it moves in the direction set by the angle key, triggers all its targets, stays pressed by an amount of time set by the wait key, then returns to it's original position where it can be operated again."
[
	angle(string) : : : "determines the direction in which the button will move (up = -1, down = -2)."
	target(target_destination)
	speed(string) : : : "speed of button's displacement (default 40)."
	wait(string) : : : "number of seconds button stays pressed (default 1, -1 = return immediately)."
	lip(string) : : : "lip remaining at end of move (default 4 units)."
	health(string) : : : "(default 0) if set to any non-zero value, the button must take damage (any amount) to activate."
	light(integer) : "Brightness" : 300
	color(string) : : : "constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1)."
	model2(string) : : : "path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3)."
	origin(string) : : : "alternate method of setting XYZ origin of .md3 model included with entity (See Notes)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	_targetname(string) : : : "Used to attach a misc_model entity to this entity."
	_lightmapscale(string) : : : "Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0)."
	_castshadows(string) : : : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world."
	_receiveshadows(string) : : : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : : : "Sets the cel shader used for this geometry. Note: omit the textures/ prefix."
	alphamap(string) : : : "Path/name for the art file used to guide the mapping of textures on the terrain surface."
	layers(string) : : : "Integer value is the number unique root shaders that will be use on the terrain."
	shader(string) : : : "Path to the metashader used to assign textures to the terrain entity. Note: Omit the textures/ prefix."
]
@SolidClass flags(Angle)  = func_door : "Normal sliding door entity. By default, the door will activate when player walks close to it or when damage is inflicted to it."
[
	angle(string) : : : "determines the opening direction of door (up = -1, down = -2)."
	speed(string) : : : "determines how fast the door moves (default 100)."
	wait(string) : : : "number of seconds before door returns (default 2, -1 = return immediately)"
	lip(string) : : : "lip remaining at end of move (default 8)"
	targetname(target_source)
	health(string) : : : "(default 0) if set to any non-zero value, the button must take damage (any amount) to activate."
	dmg(string) : : : "damage to inflict on player when he blocks operation of door (default 4). Door will reverse direction when blocked unless CRUSHER spawnflag is set."
	team(string) : : : "assign the same team name to multiple doors that should operate together (see Notes)."
	light(integer) : "Brightness" : 300
	color(string) : : : "constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1)."
	model2(string) : : : "path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3)."
	origin(string) : : : "alternate method of setting XYZ origin of .md3 model included with entity (See Notes)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	_targetname(string) : : : "Used to attach a misc_model entity to this entity."
	_lightmapscale(string) : : : "Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0)."
	_castshadows(string) : : : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world."
	_receiveshadows(string) : : : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : : : "Sets the cel shader used for this geometry. Note: omit the textures/ prefix."
	alphamap(string) : : : "Path/name for the art file used to guide the mapping of textures on the terrain surface."
	layers(string) : : : "Integer value is the number unique root shaders that will be use on the terrain."
	shader(string) : : : "Path to the metashader used to assign textures to the terrain entity. Note: Omit the textures/ prefix."
	spawnflags(flags) = 
	[
		1 : "start_open" : 0 : "the door will spawn in the open state and operate in reverse."
		4 : "crusher" : 0 : "door will not reverse direction when blocked and will keep damaging player until he dies or gets out of the way."
	]
]
@SolidClass flags(Angle)  = func_group : "This is not an entity as such. It is strictly an editor utility to group world brushes and patches together for convenience (selecting, moving, copying, etc). You cannot group entities with this."
[
	alphamap(string) : : : "this is the path/name for the art file used to guide the mapping of textures on the terrain surface."
	layers(string) : : : "this integer value is the number unique root shaders that will be use on the terrain."
	shader(string) : : : "this is the path to the metashader used to assign textures to the terrain entity."
	terrain(string) : : : "this is an on/off flag. When set to 1, the entity becomes a terrain entity. Note: unecessary when compiling with Q3Map2. See Q3Map2 keys."
	_lightmapscale(string) : : : "Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0)."
	_castshadows(string) : : : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world."
	_receiveshadows(string) : : : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : : : "Sets the cel shader used for this geometry. Note: omit the textures/ prefix."
	alphamap(string) : : : "Path/name for the art file used to guide the mapping of textures on the terrain surface."
	layers(string) : : : "Integer value is the number unique root shaders that will be use on the terrain."
	shader(string) : : : "Path to the metashader used to assign textures to the terrain entity. Note: Omit the textures/ prefix."
]
@SolidClass flags(Angle)  = func_pendulum : "Solid entity that describes a pendulum back and forth rotation movement. Rotates on the X axis by default. Pendulum frequency is a physical constant based on the length of the beam and gravity. Blocking the pendulum instantly kills a player."
[
	angle(string) : : : "angle offset of axis of rotation from default X axis (default 0)."
	speed(string) : : : "angle of swing arc in either direction from initial position (default 30)."
	phase(string) : : : "sets the start offset of the swinging cycle. Values must be 0 < phase < 1. Any integer phase value is the same as no offset (default 0)."
	noise(string) : : : "path/name of .wav file to play. Use looping sounds only (eg. sound/world/drone6.wav)."
	model2(string) : : : "path/name of model to include (eg: models/mapobjects/jets/jets01.md3)."
	origin(string) : : : "alternate method of setting XYZ origin of entity's rotation axis and .md3 model included with entity (default 0 0 0 - See Notes)."
	light(integer) : "Brightness" : 300
	color(string) : : : "constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	_targetname(string) : : : "Used to attach a misc_model entity to this entity."
	_lightmapscale(string) : : : "Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0)."
	_castshadows(string) : : : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world."
	_receiveshadows(string) : : : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : : : "Sets the cel shader used for this geometry. Note: omit the textures/ prefix."
	alphamap(string) : : : "Path/name for the art file used to guide the mapping of textures on the terrain surface."
	layers(string) : : : "Integer value is the number unique root shaders that will be use on the terrain."
	shader(string) : : : "Path to the metashader used to assign textures to the terrain entity. Note: Omit the textures/ prefix."
]
@SolidClass flags(Angle)  = func_plat : "Rising platform the player can ride to reach higher places. Plats must always be drawn in the raised position, so they will operate and be lighted correctly but they spawn in the lowered position. The plat will stay in the raised position until the player steps off. There are no proper sounds for this entity, only beep noises. It will spawn in the game and work properly but it sounds silly (see Notes)."
[
	speed(string) : : : "determines how fast the plat moves (default 150)."
	lip(string) : : : "lip remaining at end of move (default 16). Has no effect if height is set."
	height(string) : : : "if set, this will determine the total amount of vertical travel of the plat."
	dmg(string) : : : "damage to inflict on player when he blocks operation of plat (default 4). Plat will reverse direction when blocked."
	targetname(target_source)
	light(integer) : "Brightness" : 300
	color(string) : : : "constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1)."
	model2(string) : : : "path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3)."
	origin(string) : : : "alternate method of setting XYZ origin of .md3 model included with entity (See Notes)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	_targetname(string) : : : "Used to attach a misc_model entity to this entity."
	_lightmapscale(string) : : : "Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0)."
	_castshadows(string) : : : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world."
	_receiveshadows(string) : : : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : : : "Sets the cel shader used for this geometry. Note: omit the textures/ prefix."
	alphamap(string) : : : "Path/name for the art file used to guide the mapping of textures on the terrain surface."
	layers(string) : : : "Integer value is the number unique root shaders that will be use on the terrain."
	shader(string) : : : "Path to the metashader used to assign textures to the terrain entity. Note: Omit the textures/ prefix."
]
@SolidClass flags(Angle)  = func_rotating : "Solid entity that rotates continuously. Rotates on the Z axis by default and requires an origin brush. It will always start on in the game and is not targetable."
[
	speed(string) : : : "determines how fast entity rotates (default 100)."
	noise(string) : : : "path/name of .wav file to play. Use looping sounds only (eg. sound/world/drone6.wav)."
	model2(string) : : : "path/name of model to include (eg: models/mapobjects/bitch/fembotbig.md3)."
	origin(string) : : : "alternate method of setting XYZ origin of entity's rotation axis and .md3 model included with entity (default 0 0 0 - See Notes)."
	light(integer) : "Brightness" : 300
	color(string) : : : "constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	_targetname(string) : : : "Used to attach a misc_model entity to this entity."
	_lightmapscale(string) : : : "Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0)."
	_castshadows(string) : : : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world."
	_receiveshadows(string) : : : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : : : "Sets the cel shader used for this geometry. Note: omit the textures/ prefix."
	alphamap(string) : : : "Path/name for the art file used to guide the mapping of textures on the terrain surface."
	layers(string) : : : "Integer value is the number unique root shaders that will be use on the terrain."
	shader(string) : : : "Path to the metashader used to assign textures to the terrain entity. Note: Omit the textures/ prefix."
	spawnflags(flags) = 
	[
		4 : "x_axis" : 0 : "entity will rotate along the X axis."
		8 : "y_axis" : 0 : "entity will rotate along the Y axis."
	]
]
@SolidClass flags(Angle)  = func_static : "Static non-solid bspmodel. Can be used for conditional walls and models."
[
	model2(string) : : : "path/name of model to include (eg: models/mapobjects/bitch/fembotbig.md3)."
	origin(string) : : : "alternate method of setting XYZ origin of .md3 model included with entity (See Notes)."
	light(integer) : "Brightness" : 300
	color(string) : : : "constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1)."
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	_targetname(string) : : : "Used to attach a misc_model entity to this entity."
	_lightmapscale(string) : : : "Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0)."
	_castshadows(string) : : : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world."
	_receiveshadows(string) : : : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : : : "Sets the cel shader used for this geometry. Note: omit the textures/ prefix."
	alphamap(string) : : : "Path/name for the art file used to guide the mapping of textures on the terrain surface."
	layers(string) : : : "Integer value is the number unique root shaders that will be use on the terrain."
	shader(string) : : : "Path to the metashader used to assign textures to the terrain entity. Note: Omit the textures/ prefix."
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 128 204) flags(Angle)  = func_timer : "Time delay trigger that will continuously fire its targets after a preset time delay. The time delay can also be randomized. When triggered, the timer will toggle on/off."
[
	wait(string) : : : "delay in seconds between each triggering of its targets (default 1)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	spawnflags(flags) = 
	[
		1 : "start_on" : 0 : "timer will start on in the game and continuously fire its targets."
	]
]
@SolidClass flags(Angle)  = func_train : "Trains are moving solids that follow a string of path_corner entities. Trains in Q3A are very basic, they also require an origin brush (see Notes)."
[
	speed(string) : : : "speed of displacement of train (default 100 or overridden by speed value of path)."
	target(target_destination)
	model2(string) : : : "path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3)."
	origin(string) : : : "alternate method of setting XYZ origin of the train's brush(es) and .md3 model included with entity (See Notes)."
	light(integer) : "Brightness" : 300
	color(string) : : : "constantLight color of .md3 model included with entity. Has no effect on the entity's brushes (default 1 1 1)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	_targetname(string) : : : "Used to attach a misc_model entity to this entity."
	_lightmapscale(string) : : : "Floating point value scaling the resolution of lightmaps on brushes/patches in this entity (default 1.0)."
	_castshadows(string) : : : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world."
	_receiveshadows(string) : : : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : : : "Sets the cel shader used for this geometry. Note: omit the textures/ prefix."
	alphamap(string) : : : "Path/name for the art file used to guide the mapping of textures on the terrain surface."
	layers(string) : : : "Integer value is the number unique root shaders that will be use on the terrain."
	shader(string) : : : "Path to the metashader used to assign textures to the terrain entity. Note: Omit the textures/ prefix."
]
@PointClass size(-16 -16 -16, 16 16 16) color(179 0 255) flags(Angle) studio("models/powerups/holdable/medkit.md3") = holdable_medkit : "Medkit that can be picked up and used later. Brings the player's health back to 100 when used. Player can only carry one holdable item at a time."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 60, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(179 0 255) flags(Angle) studio("models/powerups/holdable/teleporter.md3") = holdable_teleporter : "Teleporter item that can be picked up and used later. Teleports the player to a random player spawn point when used. Player can only carry one holdable item at a time."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 60, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 128 0) flags(Angle)  = info_camp : "This atttracts bots which have a camping preference in their AI characteristics. It should be placed at least 32 units away from any brush surface."
[
	range(string) : : : "number of units that the bot can move away from camp entity while camping on it."
	weight(string) : : : "number that is compared against the weight assigned to all the other camp spots in the map to determine if a bot chooses to camp there. The value is normalized against all other weight values."
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 128 0) flags(Angle)  = info_notnull : "Used as a positional target for entities that can use directional pointing. A target_position can be used instead of this but was kept in Q3A for legacy purposes."
[
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode).*/"
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 128 0) flags(Angle)  = info_null : "Used as a positional target for light entities to create a spotlight effect. A target_position can be used instead of this but was kept in Q3A for legacy purposes."
[
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode).*/"
]
@PointClass size(-16 -16 -24, 16 16 32) color(255 0 255) flags(Angle)  = info_player_deathmatch : "Normal player spawning location for Q3A levels."
[
	angle(string) : : : "direction in which player will look when spawning in the game. Does not apply to bots."
	target(target_destination)
	nobots(string) : : : "when set to 1, bots will never use this spawn point to respawn in the game."
	nohumans(string) : : : "when set to 1, human players will never use this spawn point to respawn in the game."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	spawnflags(flags) = 
	[
		1 : "initial" : 0 : "makes the spawnpoint the initial place for the player to spawn at the beginning of the game.*/"
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 255) flags(Angle)  = info_player_intermission : "Camera for intermission screen between matches. This also automatically generates the podium for bot arena matches (see Notes). Can be aimed by setting the angles key or targeting an pointing to an aiming entity. Use only one per level."
[
	angles(string) : : : "alternate pitch, yaw, roll angles method of aiming intermission camera (default 0 0 0)."
	target(target_destination)
]
@PointClass size(-16 -16 -24, 16 16 32) color(255 0 0) flags(Angle)  = info_player_start : "Player spawn location. It works in Quake III Arena, but it is not used in the Id maps. Use info_player_deathmatch instead."
[
	angle(string) : : : "direction in which player will look when spawning in the game."
	target(target_destination)
]
@PointClass size(-16 -16 -16, 16 16 16) color(153 0 0) flags(Angle) studio("models/powerups/armor/armor_red.md3") = item_armor_body : "Red Armor - 100 points. All armor can be cumulated up to a maximum of 200 points and slowly wears out to 100 points."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 25, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 192 77) flags(Angle) studio("models/powerups/armor/armor_yel.md3") = item_armor_combat : "Yellow Armor - 50 points. All armor can be cumulated up to a maximum of 200 points and slowly wears out to 100 points."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 25, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(0 179 0) flags(Angle) studio("models/powerups/armor/shard.md3") = item_armor_shard : "Green Armor Shard - 5 points. All armor can be cumulated up to a maximum of 200 points and slowly wears out to 100 points."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 25, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-8 -8 -8, 8 8 8) color(255 128 0) flags(Angle)  = item_botroam : "Game Function: An invisible entity which attracts a bot to it. Use to move bots to parts of a map that might otherwise not be used (NEW ENTITY)."
[
	weight(string) : : : "non-zero floating point value, most often in the range 0 to 400. (Higher values are allowed but keep in mind that the bot should also be attracted to normal items.  Don't make the weight value too high."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(128 0 255) flags(Angle) studio("models/powerups/instant/enviro.md3") = item_enviro : "Battle Suit power-up - Gives protection against slime, lava and weapon splash damage. Lasts 30 seconds."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 120, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "time in seconds power-up will last when picked up (default 30)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(128 0 255) flags(Angle) studio("models/powerups/instant/flight.md3") = item_flight : "Flight power-up. Lasts 60 seconds."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 120, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "time in seconds power-up will last when picked up (default 60)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(128 0 255) flags(Angle) studio("models/powerups/instant/haste.md3") = item_haste : "Speed power-up. Makes player run at double speed for 30 seconds."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 120, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "time in seconds power-up will last when picked up (default 30)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(204 204 0) flags(Angle) studio("models/powerups/health/medium_cross.md3") = item_health : "Yellow cross bubble - 25 Health. Cannot be picked up over 100 health."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 35, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of health points given to the player when item is picked up (default 25)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) flags(Angle) studio("models/powerups/health/large_cross.md3") = item_health_large : "Gold cross bubble - 50 Health. Cannot be picked up over 100 health."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 35, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of health points given to the player when item is picked up (default 50)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(0 0 255) flags(Angle) studio("models/powerups/health/mega_cross.md3") = item_health_mega : "Blue M bubble - 100 Health. Adds 100 health points to current health up to a maximum of 200."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 40, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of health points given to the player when item is picked up (default 100)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(0 255 0) flags(Angle) studio("models/powerups/health/small_cross.md3") = item_health_small : "Green cross bubble - 5 Health. Can be picked up over 100 health but slowly wears out to 100 afterwards."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 35, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of health points given to the player when item is picked up (default 5)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(128 0 255) flags(Angle) studio("models/powerups/instant/invis.md3") = item_invis : "Invisibility power-up. Lasts 30 seconds."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 120, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "time in seconds power-up will last when picked up (default 30)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(102 153 255) flags(Angle) studio("models/powerups/instant/quad.md3") = item_quad : "Quad Damage power-up. Lasts 30 seconds."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 120, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "time in seconds power-up will last when picked up (default 30)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(128 0 255) flags(Angle) studio("models/powerups/instant/regen.md3") = item_regen : "Health Regeneration power-up. This will boost your current health by 5 points every second for a period of up to 30 seconds or up to 200 points whichever comes first. Afterwards, any health points over 100 slowly wears out to 100."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 120, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "time in seconds power-up will last when picked up (default 30)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-8 -8 -8, 8 8 8) iconsprite("sprites/light.spr") flags(Light)  = light : "Non-displayed point light source. The -pointscale and -scale arguments to Q3Map2 affect the brightness of these lights. The -skyscale argument affects brightness of entity sun lights."
[
	light(integer) : "Brightness" : 300
	_color(color1) : "RGB color" : "1 1 0.5"
	target(target_destination)
	radius(string) : : : "overrides the default 64 unit radius of a spotlight at the target point."
	_sun(string) : : : "Set this key to 1 on a spotlight to make an infinite sun light."
	fade(string) : : : "Fades light attenuation. Only affects linear lights."
	scale(string) : : : "Scales light attentation, from SOF2/JK2. Scales the light value."
	spawnflags(flags) = 
	[
		1 : "linear" : 0 : "Use a linear falloff. Default is inverse distance squared (more realistic)."
		2 : "noangle" : 0 : "Ignore angle attenuation."
		4 : "unused1" : 0
		8 : "unused2" : 0
		16 : "nogridlight" : 0 : "Do not affect the lightgrid (dynamic entity lighting).*/"
	]
]
@PointClass size(-6 -6 -6, 6 6 6) color(0 179 77) flags(Angle)  = lightJunior : "Non-displayed point light source THAT ONLY AFFECTS ENTITIES (lightgrid). The -pointscale and -scale arguments to Q3Map2 affect the brightness of these lights. The -skyscale argument affects brightness of entity sun lights."
[
	light(integer) : "Brightness" : 300
	_color(color1) : "RGB color" : "1 1 0.5"
	target(target_destination)
	radius(string) : : : "overrides the default 64 unit radius of a spotlight at the target point."
	_sun(string) : : : "Set this key to 1 on a spotlight to make an infinite sun light."
	fade(string) : : : "Fades light attenuation. Only affects linear lights."
	scale(string) : : : "Scales light attentation, from SOF2/JK2. Scales the light value."
	spawnflags(flags) = 
	[
		1 : "linear" : 0 : "Use a linear falloff. Default is inverse distance squared (more realistic)."
		2 : "noangle" : 0 : "Ignore angle attenuation."
		4 : "unused1" : 0
		8 : "unused2" : 0
		16 : "nogridlight" : 0 : "Do not affect the lightgrid (dynamic entity lighting). Setting this spawnflag will disable this light entirely.*/"
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 128 64) flags(Angle)  = misc_model : "Generic placeholder for inserting MD3 models in game. Requires compilation of map geometry to be added to level. If the map is compiled with Q3Map2, then ASE, 3DS, OBJ and other model formats are supported."
[
	angle(string) : : : "direction in which model will be oriented."
	model(string) : : : "path/name of model to use (eg: models/mapobjects/teleporter/teleporter.md3)."
	angles(string) : : : "Individual control of PITCH, YAW, and ROLL (default 0 0 0)."
	modelscale(string) : : : "Floating-point value used to scale a model up or down (default 1.0)."
	modelscale_vec(string) : : : "Floating-point vector used to scale a model's axes individually (default 1.0 1.0 1.0)."
	_remap(string) : : : "Used to remap textures/shaders in the model. To remap all shaders to a given shader, use *;models/mymodel/mytexture. To remap a specific shader, use models/mymodel/old;models/mymodel/new."
	target(target_destination)
	_lightmapscale(string) : : : "Floating point value scaling the resolution of lightmaps on this model (if model is using lightmapped shaders) (default 1.0)."
	_castshadows(string) : : : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world."
	_receiveshadows(string) : : : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : : : "Sets the cel shader used for this geometry. Note: omit the textures/ prefix."
]
@PointClass size(-8 -8 -8, 8 8 8) color(255 128 64) flags(Angle)  = misc_portal_camera : "Portal camera. This camera is used to project its view onto a portal surface in the level through the intermediary of a misc_portal_surface entity. Use the angles key or target a target_position or info_notnull entity to set the camera's pointing direction."
[
	angles(string) : : : "this sets the pitch and yaw aiming angles of the portal camera (default 0 0). Use roll key to set roll angle."
	target(target_destination)
	targetname(target_source)
	roll(string) : : : "roll angle of camera. A value of 0 is upside down and 180 is the same as the player's view."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	spawnflags(flags) = 
	[
		1 : "slowrotate" : 0 : "makes the portal camera rotate slowly along the roll axis."
		2 : "fastrotate" : 0 : "makes the portal camera rotate faster along the roll axis."
	]
]
@PointClass size(-8 -8 -8, 8 8 8) color(255 128 64) flags(Angle)  = misc_portal_surface : "Portal surface indicator. This will lock on the brush face closest to it and identify as a portal. The view displayed on the portal surface is the view of the misc_portal_camera that this entity targets. Also used for mirrors (see Notes)."
[
	target(target_destination)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
]
@PointClass size(-32 -32 -24, 32 32 -16) color(255 128 64) flags(Angle)  = misc_teleporter_dest : "Teleport destination location point for trigger_teleporter entities."
[
	angle(string) : : : "direction in which player will look when teleported."
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode).*/"
]
@PointClass size(-8 -8 -8, 8 8 8) color(128 77 0) flags(Angle)  = path_corner : "Path corner entity that func_trains can be made to follow."
[
	target(target_destination)
	targetname(target_source)
	speed(string) : : : "speed of func_train while moving to the next path corner. This will override the speed value of the train."
	wait(string) : : : "number of seconds func_train will pause on path corner before moving to next path corner (default 0 - see Notes)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
]
@PointClass size(-8 -8 -8, 8 8 8) color(255 0 128) flags(Angle)  = shooter_grenade : "This will shoot a grenade each time it's triggered. Aiming is done by setting the angles key or by targeting an info_notnull or target_position entity."
[
	angles(string) : : : "this sets the pitch and yaw aiming angles of shooter (default 0 0). The roll angle does not apply."
	targetname(target_source)
	target(target_destination)
	random(string) : : : "random aiming variance in degrees from the straight line to the targeted entity (default 0 - see Notes)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
]
@PointClass size(-8 -8 -8, 8 8 8) color(255 0 128) flags(Angle)  = shooter_plasma : "This will shoot a plasma ball each time it's triggered. Aiming is done by setting the angles key or by targeting an info_notnull or target_position entity."
[
	angles(string) : : : "this sets the pitch and yaw aiming angles of shooter (default 0 0). The roll angle does not apply."
	targetname(target_source)
	target(target_destination)
	random(string) : : : "random aiming variance in degrees from the straight line to the targeted entity (default 0 - see Notes)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
]
@PointClass size(-8 -8 -8, 8 8 8) color(255 0 128) flags(Angle)  = shooter_rocket : "This will shoot a rocket each time it's triggered. Aiming is done by setting the angles key or by targeting an info_notnull or target_position entity."
[
	angles(string) : : : "this sets the pitch and yaw aiming angles of shooter (default 0 0). The roll angle does not apply."
	targetname(target_source)
	target(target_destination)
	random(string) : : : "random aiming variance in degrees from the straight line to the targeted entity (default 0 - see Notes)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 179 179) flags(Angle)  = target_delay : "Time delay trigger intermediary. Like a target_relay, this can only be fired by other triggers which will cause it in turn to fire its own targets."
[
	targetname(target_source)
	target(target_destination)
	wait(string) : : : "delay in seconds from when this gets triggered to when it fires its own targets (default approx. 1)."
	delay(string) : : : "same as wait? replaces it? WTF?...I'm confused now."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 128 0) flags(Angle)  = target_give : "This is used to give ammo, weapons, health or items to the player who activates it."
[
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 128 0) flags(Angle)  = target_kill : "This will kill the player who activates the trigger that fires this target."
[
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode).*/"
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 128 0) flags(Angle)  = target_location : "Location marker used by bots and players for team orders and team chat in the course of Teamplay games. The closest target_location in sight is used for the location. If none is in sight, the closest in distance is used."
[
	message(string) : : : "name of the location (text string). Displayed in parentheses in front of all team chat and order messages."
	count(string) : : : "color of the location text displayed in parentheses during team chat. Set to 0-7 for color."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode).*/"
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 128 0) flags(Angle)  = target_position : "Aiming target for entities like light, misc_portal_camera and trigger_push (jump pads) in particular."
[
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 128 0) flags(Angle)  = target_print : "This will print a message on the center of the screen when triggered. By default, all the clients will see the message."
[
	message(string) : : : "text string to print on screen."
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	spawnflags(flags) = 
	[
		1 : "redteam" : 0 : "only the red team players will see the message."
		2 : "blueteam" : 0 : "only the blue team players will see the message."
		4 : "private" : 0 : "only the player that activates the target will see the message.*/"
	]
]
@PointClass size(-8 -8 -8, 8 8 8) color(128 128 128) flags(Angle)  = target_push : "This can be used to create jump pads and launch ramps. The direction of push can be set by the angles key or pointing to a target_position or info_notnull entity. Unlike trigger_push, this is NOT client side predicted and must be activated by a trigger."
[
	angles(string) : : : "this sets the pitch and yaw aiming angles of push entity (default 0 0). The roll angle does not apply."
	speed(string) : : : "speed of push (default 1000). Has no effect if entity targets an aiming entity."
	targetname(target_source)
	target(target_destination)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	spawnflags(flags) = 
	[
		1 : "bouncepad" : 0 : "if set, trigger will play bounce noise instead of beep noise when activated (recommended)."
	]
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 179 179) flags(Angle)  = target_relay : "This can only be activated by other triggers which will cause it in turn to activate its own targets."
[
	targetname(target_source)
	target(target_destination)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	spawnflags(flags) = 
	[
		1 : "red_only" : 0 : "only red team players can activate trigger."
		2 : "blue_only" : 0 : "only red team players can activate trigger."
		4 : "random" : 0 : "one one of the targeted entities will be triggered at random.*/"
	]
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 179 179) flags(Angle)  = target_remove_powerups : "This takes away any and all item_* type powerups from player except health and armor (holdable_* items are not taken away either). Must be activated by a button or trigger_multiple entity. The player that activates the trigger will lose any powerup(s) currently in his possession."
[
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode).*/"
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 128 0) flags(Angle)  = target_score : "This is used to automatically give frag points to the player who activates this. A spawn location entity like info_player_* or CTF respawn points can target this entity to give points to the player when he spawns in the game. Or a trigger can also be used to activate this. The activator of the trigger will get the points."
[
	targetname(target_source)
	count(string) : : : "number of frag points to give to player (default 1)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode).*/"
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 179 179) flags(Angle)  = target_speaker : "Sound generating entity that plays .wav files. Normal non-looping sounds play each time the target_speaker is triggered. Looping sounds can be set to play by themselves (no activating trigger) or be toggled on/off by a trigger."
[
	noise(string) : : : "path/name of .wav file to play (eg. sound/world/growl1.wav - see Notes)."
	wait(string) : : : "delay in seconds between each time the sound is played (random key must be set - see Notes)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (wait key must be set - see Notes)."
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	spawnflags(flags) = 
	[
		1 : "looped_on" : 0 : "sound will loop and initially start on in level (will toggle on/off when triggered)."
		2 : "looped_off" : 0 : "sound will loop and initially start off in level (will toggle on/off when triggered)."
		4 : "global" : 0 : "sound will play full volume throughout the level."
		8 : "activator" : 0 : "sound will play only for the player that activated the target."
	]
]
@PointClass size(-8 -8 -8, 8 8 8) color(0 128 0) flags(Angle)  = target_teleporter : "Activating this will teleport players to the location of the targeted misc_teleporter_dest entity. Unlike trigger_teleport, this entity must be activated by a trigger and does NOT allow client prediction of events."
[
	targetname(target_source)
	target(target_destination)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode).*/"
]
@PointClass size(-16 -16 -16, 16 16 16) color(0 51 255) flags(Angle) studio("models/flags/b_flag.md3") = team_CTF_blueflag : "Blue team flag for CTF games."
[
]
@PointClass size(-16 -16 -24, 16 16 32) color(0 51 255) flags(Angle)  = team_CTF_blueplayer : "Initial Blue team spawning position for CTF games. This is where players spawn when they join the Blue team."
[
	target(target_destination)
]
@PointClass size(-16 -16 -24, 16 16 32) color(0 51 255) flags(Angle)  = team_CTF_bluespawn : "Blue team respawning position for CTF games. This is where Blue team players respawn after they get fragged."
[
	target(target_destination)
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 51 0) flags(Angle) studio("models/flags/r_flag.md3") = team_CTF_redflag : "Red team flag for CTF games."
[
]
@PointClass size(-16 -16 -24, 16 16 32) color(255 51 0) flags(Angle)  = team_CTF_redplayer : "Initial Red team spawning position for CTF games. This is where players spawn when they join the Red team."
[
	target(target_destination)
]
@PointClass size(-16 -16 -24, 16 16 32) color(0 51 255) flags(Angle)  = team_CTF_redspawn : "Red team respawning position for CTF games. This is where Red team players respawn after they get fragged."
[
	target(target_destination)
]
@PointClass size(-8 -8 -8, 8 8 8) color(128 128 128) flags(Angle)  = trigger_always : "Automatic trigger. It will fire the entities it targets as soon as it spawns in the game."
[
	target(target_destination)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode).*/"
]
@SolidClass flags(Angle)  = trigger_hurt : "Any player that touches this will be hurt by dmg points of damage once per server frame (very fast). A sizzling sound is also played while the player is being hurt."
[
	dmg(string) : : : "number of points of damage inflicted to player per server frame (default 5 - integer values only)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	spawnflags(flags) = 
	[
		1 : "start_off" : 0
		4 : "silent" : 0 : "supresses the sizzling sound while player is being hurt."
		8 : "no_protection" : 0 : "player will be hurt regardless of protection (see Notes)."
		16 : "slow" : 0 : "changes the damage rate to once per second."
	]
]
@SolidClass flags(Angle)  = trigger_multiple : "Variable size repeatable trigger. It will fire the entities it targets when touched by player. Can be made to operate like a trigger_once entity by setting the wait key to -1. It can also be activated by another trigger that targets it."
[
	target(target_destination)
	targetname(target_source)
	wait(string) : : : "time in seconds until trigger becomes re-triggerable after it's been touched (default 0.2, -1 = trigger once)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
]
@SolidClass flags(Angle)  = trigger_push : "This is used to create jump pads and launch ramps. It MUST point to a target_position or info_notnull entity to work. Unlike target_push, this is client side predicted."
[
	target(target_destination)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
]
@SolidClass flags(Angle)  = trigger_teleport : "Touching this will teleport players to the location of the targeted misc_teleporter_dest entity. This entity allows client prediction of events."
[
	target(target_destination)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode).*/"
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 128) flags(Angle) studio("models/weapons2/bfg/bfg.md3") = weapon_bfg : "Big Freaking Gun."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 5, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when weapon is picked up (default 20)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 128) flags(Angle) studio("models/weapons2/gauntlet/gauntlet.md3") = weapon_gauntlet : "Gauntlet."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 5, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 128) flags(Angle) studio("models/weapons2/grapple/grapple.md3") = weapon_grapplinghook : "Grappling Hook. Spawns in the game and works but is unskinned."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 5, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 128) flags(Angle) studio("models/weapons2/grenadel/grenadel.md3") = weapon_grenadelauncher : "Grenade Launcher."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 5, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when weapon is picked up (default 10)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 128) flags(Angle) studio("models\weapons2\lightning\lightning.md3") = weapon_lightning : "Lightning Gun."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 5, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when weapon is picked up (default 100)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 128) flags(Angle) studio("models\weapons2\machinegun\machinegun.md3") = weapon_machinegun : "Machine Gun."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 5, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when weapon is picked up (default 100)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 128) flags(Angle) studio("models/weapons2/plasma/plasma.md3") = weapon_plasmagun : "Plasma gun."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 5, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when weapon is picked up (default 50)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 128) flags(Angle) studio("models/weapons2/railgun/railgun.md3") = weapon_railgun : "Railgun."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 5, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when weapon is picked up (default 10)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 128) flags(Angle) studio("models/weapons2/rocketl/rocketl.md3") = weapon_rocketlauncher : "Rocket Launcher."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 5, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when weapon is picked up (default 10)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@PointClass size(-16 -16 -16, 16 16 16) color(255 0 128) flags(Angle) studio("models/weapons2/shotgun/shotgun.md3") = weapon_shotgun : "Shotgun."
[
	wait(string) : : : "time in seconds before item respawns after being picked up (default 5, -1 = never respawn)."
	random(string) : : : "random time variance in seconds added or subtracted from wait delay (default 0 - see Notes)."
	count(string) : : : "sets the amount of ammo given to the player when weapon is picked up (default 10)."
	team(string) : : : "set this to team items. Teamed items will respawn randomly after team master is picked up (see Notes)."
	target(target_destination)
	targetname(target_source)
	notfree(string) : : : "when set to 1, entity will not spawn in Free for all and Tournament modes."
	notteam(string) : : : "when set to 1, entity will not spawn in Teamplay and CTF modes."
	notsingle(string) : : : "when set to 1, entity will not spawn in Single Player mode (bot play mode)."
	notbot(string) : : : "used to make an item invisible for bot attraction."
	spawnflags(flags) = 
	[
		1 : "suspended" : 0 : "item will spawn where it was placed in map and won't drop to the floor."
	]
]
@SolidClass flags(Angle)  = worldspawn : "Only used for the world."
[
	message(string) : : : "text to print at user logon. Used for name of level."
	music(string) : : : "path/name of looping .wav file used for level's music (eg. music/sonic5.wav)."
	ambient(string) : : : "Adds a constant value to overall lighting. Use is not recommended. Ambient light will have a tendency to flatten out variations in light and shade."
	_color(color1) : "RGB color" : "1 1 0.5"
	gravity(string) : : : "gravity of level (default is normal gravity: 800)."
	gridsize(string) : : : "granularity of the lightgrid created by q3map. Value is three integers separated by spaces, representing number of units between grid points in X Y Z. Default gridsize value is 128 128 256. Use larger powers of 2 to reduce BSP size and compile time on very large maps."
	_blocksize(string) : : : "q3map always splits the BSP tree along the planes X=_blocksize*n and Y=_blocksize*n. Default _blocksize value is 1024. Increase the blocksize using larger powers of 2 to reduce compile times on very large maps with a low structural brush density."
	_minlight(string) : : : "Minimum light value, levelwide. Uses the _color key to set color. Does not add unlike ambient."
	_minvertexlight(string) : : : "Minimum vertex lighting, levelwide."
	_mingridlight(string) : : : "Minimum lightgrid (dynamic entity lighting) levelwide."
	_keeplights(string) : : : "Keep light entities in the BSP. Normally stripped out by the BSP process and read from the .map file by the lighting phase."
	_noshadersun(string) : : : "Ignore q3map_sun/sun directives in sky shaders and ONLY use entity sun lights."
	_farplanedist(string) : : : "Limit on how many units the vis phase of compilation can see. Used in combination with level-wide fog, it can help reduce r_speeds on large, open maps."
	_foghull(string) : : : "Shader to use for fog hull. Foghull shader should be a sky shader. Omit the textures/ prefix."
	_lightmapscale(string) : : : "Floating point value scaling the resolution of lightmaps on brushes/patches in the world. Can be overridden in func_group (or other entities) (default 1.0)."
	_castshadows(string) : : : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world."
	_receiveshadows(string) : : : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : : : "Sets the cel shader used for this geometry. Note: omit the textures/ prefix. Overridable in entities."
	alphamap(string) : : : "Path/name for the art file used to guide the mapping of textures on the terrain surface."
	layers(string) : : : "Integer value is the number unique root shaders that will be use on the terrain."
	shader(string) : : : "Path to the metashader used to assign textures to the terrain entity. Note: Omit the textures/ prefix.*/"
]
